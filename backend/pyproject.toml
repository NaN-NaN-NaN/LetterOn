[project]
name = "letteron-backend"
version = "1.0.0"
description = "LetterOn Backend - AI-powered physical letter management system"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "LetterOn Team", email = "team@letteron.com" }
]
keywords = ["letteron", "fastapi", "aws", "ocr", "ai", "letter-management"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi==0.109.0",
    "uvicorn[standard]==0.27.0",
    "pydantic==2.5.3",
    "pydantic-settings==2.1.0",
    "python-multipart==0.0.6",
    "boto3==1.34.28",
    "botocore==1.34.28",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "bcrypt==4.1.2",
    "apscheduler==3.10.4",
    "python-dotenv==1.0.0",
    "email-validator==2.1.0",
    "httpx==0.26.0",
    "python-json-logger==2.0.7",
    "python-dateutil==2.8.2",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.4",
    "pytest-asyncio==0.23.3",
    "pytest-cov==4.1.0",
    "moto[dynamodb]==5.0.0",
    "mypy==1.8.0",
    "types-python-dateutil==2.8.19.20240106",
]

deploy = [
    "mangum==0.17.0",
    "gunicorn==21.2.0",
]

[project.urls]
Homepage = "https://github.com/letteron/backend"
Documentation = "https://github.com/letteron/backend#readme"
Repository = "https://github.com/letteron/backend.git"
Issues = "https://github.com/letteron/backend/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "moto[dynamodb]>=5.0.0",
    "mypy>=1.8.0",
    "types-python-dateutil>=2.8.19.20240106",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (require AWS services)",
    "slow: Slow running tests",
]
env = [
    "ENVIRONMENT=test",
    "SECRET_KEY=test-secret-key-for-testing-purposes-only-min-32-chars",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
